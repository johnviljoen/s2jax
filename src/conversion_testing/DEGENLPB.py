import jax.numpy as jnp
import s2jax.sparse_utils as spu
from jax.experimental.sparse import BCOO, BCSR
import s2jax.jax_utils as jtu
from s2jax.utils import *
class DEGENLPB:

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 
# 
#    Problem : DEGENLPB
#    *********
# 
#    A linear program with some degeneracy.
# 
#    Source:
#    T.C.T. Kotiah and D.I. Steinberg,
#    "Occurences of cycling and other phenomena arising in a class of
#    linear programming models",
#    Communications of the ACM, vol. 20, pp. 107-112, 1977.
# 
#    SIF input: Ph. Toint, Aug 1990.
# 
#    classification = "C-CLLR2-AN-20-15"
# 
#    Number of variables
# 
# 
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#   Translated to Python by S2MPJ version 25 XI 2024
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    name = 'DEGENLPB'

    def __init__(self, *args): 
        import jax.numpy as jnp
        from scipy.sparse import csr_matrix
        nargin   = len(args)

        #%%%%%%%%%%%%%%%%%%%  PREAMBLE %%%%%%%%%%%%%%%%%%%%
        v_  = {}
        ix_ = {}
        ig_ = {}
        v_['N'] = 20
        v_['M'] = 15
        v_['1'] = 1
        #%%%%%%%%%%%%%%%%%%%  VARIABLES %%%%%%%%%%%%%%%%%%%%
        self.xnames = jnp.array([])
        self.xscale = jnp.array([])
        intvars   = jnp.array([])
        binvars   = jnp.array([])
        irA          = jnp.array([],dtype=int)
        icA          = jnp.array([],dtype=int)
        valA         = jnp.array([],dtype=float)
        for I in range(int(v_['1']),int(v_['N'])+1):
            [iv,ix_,_] = jtu.s2mpj_ii('X'+str(I),ix_)
            self.xnames=jtu.arrset(self.xnames,iv,'X'+str(I))
        #%%%%%%%%%%%%%%%%%%  DATA GROUPS %%%%%%%%%%%%%%%%%%%
        self.gscale  = jnp.array([])
        self.grnames = jnp.array([])
        cnames       = jnp.array([])
        self.cnames  = jnp.array([])
        gtype        = jnp.array([])
        [ig,ig_,_] = jtu.s2mpj_ii('OBJ',ig_)
        gtype = jtu.arrset(gtype,ig,'<>')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(-0.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(-33.333))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(-100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(-0.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(-33.343))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(-100.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(-33.333))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(-133.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(-100.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C1',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C1')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(2.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C2',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C2')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(300.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.09))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.03))
        [ig,ig_,_] = jtu.s2mpj_ii('C3',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C3')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.326))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(-101.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(200.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(0.06))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(0.02))
        [ig,ig_,_] = jtu.s2mpj_ii('C4',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C4')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.0066667))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(-1.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(200.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(0.06))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(0.02))
        [ig,ig_,_] = jtu.s2mpj_ii('C5',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C5')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(6.6667e-4))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(-1.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(200.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(0.06))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(0.02))
        [ig,ig_,_] = jtu.s2mpj_ii('C6',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C6')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.978))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(-201.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C7',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C7')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.489))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(-101.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C8',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C8')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.001))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.489))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(-101.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C9',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C9')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.001))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.01))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(-1.04))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X18']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C10',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C10')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.02))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(-1.06))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X17']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C11',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C11')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.002))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(-1.02))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(100.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(0.03))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(0.01))
        [ig,ig_,_] = jtu.s2mpj_ii('C12',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C12')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(-2.5742e-6))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(0.00252))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(-0.61975))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(1.03))
        [ig,ig_,_] = jtu.s2mpj_ii('C13',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C13')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(-0.00257))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(0.25221))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(-6.2))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X17']])
        valA = jtu.append(valA,float(1.09))
        [ig,ig_,_] = jtu.s2mpj_ii('C14',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C14')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(0.00629))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(-0.20555))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(-4.1106))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(101.04))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(505.1))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(-256.72))
        [ig,ig_,_] = jtu.s2mpj_ii('C15',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C15')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(0.00841))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(-0.08406))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(-0.20667))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(20.658))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X18']])
        valA = jtu.append(valA,float(1.07))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(-10.5))
        #%%%%%%%%%%%%%% GLOBAL DIMENSIONS %%%%%%%%%%%%%%%%%
        self.n   = len(ix_)
        ngrp   = len(ig_)
        legrps = jnp.where(gtype=='<=')[0]
        eqgrps = jnp.where(gtype=='==')[0]
        gegrps = jnp.where(gtype=='>=')[0]
        self.nle = len(legrps)
        self.neq = len(eqgrps)
        self.nge = len(gegrps)
        self.m   = self.nle+self.neq+self.nge
        self.congrps = jnp.concatenate((legrps,eqgrps,gegrps))
        self.cnames = cnames[self.congrps]
        self.nob = ngrp-self.m
        self.objgrps = jnp.where(gtype=='<>')[0]
        #%%%%%%%%%%%%%%%%%% CONSTANTS %%%%%%%%%%%%%%%%%%%%%
        self.gconst = jnp.zeros((ngrp,1))
        self.gconst = jtu.arrset(self.gconst,ig_['C1'],float(0.70785))
        #%%%%%%%%%%%%%%%%%%%  BOUNDS %%%%%%%%%%%%%%%%%%%%%
        self.xupper = jnp.full((self.n,1),1.0)
        self.xlower = jnp.zeros((self.n,1))
        #%%%%%%%%%%%%%%%%%% START POINT %%%%%%%%%%%%%%%%%%
        self.x0 = jnp.full((self.n,1),float(1.0))
        #%%%%%%%%%%%%%%%%%% OBJECT BOUNDS %%%%%%%%%%%%%%%%%
        self.objlower = 0.0
#    Solution
# LO SOLTN               3.06435
        #%%%%%%%% BUILD THE SPARSE MATRICES %%%%%%%%%%%%%%%
        self.A = BCSR.from_bcoo(BCOO((valA, jnp.array((irA,icA)).T), shape=(ngrp,self.n)))
        #%%%%%%%% DEFAULT FOR MISSING SECTION(S) %%%%%%%%%%
        #%%%%%%%%%%%%% FORM clower AND cupper %%%%%%%%%%%%%
        self.clower = jnp.full((self.m,1),-float('Inf'))
        self.cupper = jnp.full((self.m,1),+float('Inf'))
        self.clower = jtu.np_like_set(self.clower, jnp.array([jnp.arange(self.nle,self.nle+self.neq)]), jnp.zeros((self.neq,1)))
        self.cupper = jtu.np_like_set(self.cupper, jnp.array([jnp.arange(self.nle,self.nle+self.neq)]), jnp.zeros((self.neq,1)))
        #%%%% RETURN VALUES FROM THE __INIT__ METHOD %%%%%%
        self.lincons   = jnp.arange(len(self.congrps))
        self.pbclass   = "C-CLLR2-AN-20-15"
        self.objderlvl = 2
        self.conderlvl = [2]


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

