from jax.experimental.sparse import BCOO, BCSR
import s2jax.jax_utils as jtu
from s2jax.utils import *
class NASH:

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# 
# 
#    Problem : NASH
#    *********
# 
#    A quadratic programming reformulation of a linear
#    complementarity problem arising from Nash equilibrium
#    provided by Michael Ferris
# 
#    classification = "C-CQLR2-AN-72-24"
# 
# 
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#   Translated to Python by S2MPJ version 25 XI 2024
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    name = 'NASH'

    def __init__(self, *args): 
        import jax.numpy as jnp
        from scipy.sparse import csr_matrix
        nargin   = len(args)

        #%%%%%%%%%%%%%%%%%%%  PREAMBLE %%%%%%%%%%%%%%%%%%%%
        v_  = {}
        ix_ = {}
        ig_ = {}
        v_['1'] = 1
        v_['N'] = 72
        #%%%%%%%%%%%%%%%%%%%  VARIABLES %%%%%%%%%%%%%%%%%%%%
        self.xnames = jnp.array([])
        self.xscale = jnp.array([])
        intvars   = jnp.array([])
        binvars   = jnp.array([])
        irA          = jnp.array([],dtype=int)
        icA          = jnp.array([],dtype=int)
        valA         = jnp.array([],dtype=float)
        for J in range(int(v_['1']),int(v_['N'])+1):
            [iv,ix_,_] = jtu.s2mpj_ii('X'+str(J),ix_)
            self.xnames=jtu.arrset(self.xnames,iv,'X'+str(J))
        #%%%%%%%%%%%%%%%%%%  DATA GROUPS %%%%%%%%%%%%%%%%%%%
        self.gscale  = jnp.array([])
        self.grnames = jnp.array([])
        cnames       = jnp.array([])
        self.cnames  = jnp.array([])
        gtype        = jnp.array([])
        [ig,ig_,_] = jtu.s2mpj_ii('OBJ',ig_)
        gtype = jtu.arrset(gtype,ig,'<>')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X56']])
        valA = jtu.append(valA,float(1000.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X57']])
        valA = jtu.append(valA,float(500.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X58']])
        valA = jtu.append(valA,float(1000.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C1',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C1')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X25']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X49']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C2',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C2')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X26']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X50']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C3',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C3')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X27']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X51']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C4',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C4')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X28']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X52']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C5',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C5')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X29']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X53']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C6',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C6')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X30']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X54']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C7',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C7')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X31']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X55']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(0.02309))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(0.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(0.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(0.447486))
        [ig,ig_,_] = jtu.s2mpj_ii('C8',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C8')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X32']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X56']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C9',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C9')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X33']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X57']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X11']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C10',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C10')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X34']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X58']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X12']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C11',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C11')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X35']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X59']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X2']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X4']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X6']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C12',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C12')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X36']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X60']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X3']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X5']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X7']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C13',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C13')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X37']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X61']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X16']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(-.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(0.33))
        [ig,ig_,_] = jtu.s2mpj_ii('C14',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C14')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X38']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X62']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X17']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(-.67))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(-.33))
        [ig,ig_,_] = jtu.s2mpj_ii('C15',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C15')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X39']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X63']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X18']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(-.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(-.67))
        [ig,ig_,_] = jtu.s2mpj_ii('C16',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C16')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X40']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X64']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C17',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C17')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X41']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X65']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C18',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C18')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X42']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X66']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C19',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C19')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X43']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X67']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(0.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(0.67))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(0.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C20',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C20')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X44']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X68']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X13']])
        valA = jtu.append(valA,float(-.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X14']])
        valA = jtu.append(valA,float(0.33))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X15']])
        valA = jtu.append(valA,float(0.67))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C21',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C21')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X45']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X69']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(-1.0))
        [ig,ig_,_] = jtu.s2mpj_ii('C22',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C22')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X46']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X70']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(-.288626))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X8']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X19']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(8.892169))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(-3.298588))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(-5.593581))
        [ig,ig_,_] = jtu.s2mpj_ii('C23',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C23')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X47']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X71']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(-.263887))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X9']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X10']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X20']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(-3.298588))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(8.412719))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(-5.114131))
        [ig,ig_,_] = jtu.s2mpj_ii('C24',ig_)
        gtype = jtu.arrset(gtype,ig,'==')
        cnames = jtu.arrset(cnames,ig,'C24')
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X48']])
        valA = jtu.append(valA,float(-1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X72']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X1']])
        valA = jtu.append(valA,float(-.447486))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X21']])
        valA = jtu.append(valA,float(1.0))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X22']])
        valA = jtu.append(valA,float(-5.593581))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X23']])
        valA = jtu.append(valA,float(-5.114131))
        irA  = jtu.append(irA,[ig])
        icA  = jtu.append(icA,[ix_['X24']])
        valA = jtu.append(valA,float(10.707712))
        #%%%%%%%%%%%%%% GLOBAL DIMENSIONS %%%%%%%%%%%%%%%%%
        self.n   = len(ix_)
        ngrp   = len(ig_)
        legrps = jnp.where(gtype=='<=')[0]
        eqgrps = jnp.where(gtype=='==')[0]
        gegrps = jnp.where(gtype=='>=')[0]
        self.nle = len(legrps)
        self.neq = len(eqgrps)
        self.nge = len(gegrps)
        self.m   = self.nle+self.neq+self.nge
        self.congrps = jnp.concatenate((legrps,eqgrps,gegrps))
        self.cnames = cnames[self.congrps]
        self.nob = ngrp-self.m
        self.objgrps = jnp.where(gtype=='<>')[0]
        #%%%%%%%%%%%%%%%%%% CONSTANTS %%%%%%%%%%%%%%%%%%%%%
        self.gconst = jnp.zeros((ngrp,1))
        self.gconst = jtu.arrset(self.gconst,ig_['C2'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C3'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C4'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C5'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C6'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C7'],float(35.100673))
        self.gconst = jtu.arrset(self.gconst,ig_['C8'],float(-15.0))
        self.gconst = jtu.arrset(self.gconst,ig_['C9'],float(-15.0))
        self.gconst = jtu.arrset(self.gconst,ig_['C10'],float(-20.0))
        self.gconst = jtu.arrset(self.gconst,ig_['C22'],float(61.241589))
        self.gconst = jtu.arrset(self.gconst,ig_['C23'],float(-1.150548))
        self.gconst = jtu.arrset(self.gconst,ig_['C24'],float(-60.091041))
        #%%%%%%%%%%%%%%%%%%%  BOUNDS %%%%%%%%%%%%%%%%%%%%%
        self.xlower = jnp.full((self.n,1),0.E+00)
        self.xupper = jnp.full((self.n,1),0.E+00)
        self.xlower = jtu.np_like_set(self.xlower, ix_['X1'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X1'], +float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X8'], 1000.0)
        self.xupper = jtu.np_like_set(self.xupper, ix_['X9'], 500.0)
        self.xupper = jtu.np_like_set(self.xupper, ix_['X10'], 1000.0)
        self.xlower = jtu.np_like_set(self.xlower, ix_['X11'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X11'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X12'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X12'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X13'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X13'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X14'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X14'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X15'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X15'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X16'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X16'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X17'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X17'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X18'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X18'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X19'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X19'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X20'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X20'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X21'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X21'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X22'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X22'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X23'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X23'], +float('Inf'))
        self.xlower = jtu.np_like_set(self.xlower, ix_['X24'], -float('Inf'))
        self.xupper = jtu.np_like_set(self.xupper, ix_['X24'], +float('Inf'))
        #%%%%%%%%%%%%%%%%%%%% QUADRATIC %%%%%%%%%%%%%%%%%%%
        irH  = jnp.array([],dtype=int)
        icH  = jnp.array([],dtype=int)
        valH = jnp.array([],dtype=float)
        irH  = jtu.append(irH,[ix_['X25']])
        icH  = jtu.append(icH,[ix_['X1']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X1']])
        icH  = jtu.append(icH,[ix_['X25']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X26']])
        icH  = jtu.append(icH,[ix_['X2']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X2']])
        icH  = jtu.append(icH,[ix_['X26']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X27']])
        icH  = jtu.append(icH,[ix_['X3']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X3']])
        icH  = jtu.append(icH,[ix_['X27']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X28']])
        icH  = jtu.append(icH,[ix_['X4']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X4']])
        icH  = jtu.append(icH,[ix_['X28']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X29']])
        icH  = jtu.append(icH,[ix_['X5']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X5']])
        icH  = jtu.append(icH,[ix_['X29']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X30']])
        icH  = jtu.append(icH,[ix_['X6']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X6']])
        icH  = jtu.append(icH,[ix_['X30']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X31']])
        icH  = jtu.append(icH,[ix_['X7']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X7']])
        icH  = jtu.append(icH,[ix_['X31']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X32']])
        icH  = jtu.append(icH,[ix_['X8']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X8']])
        icH  = jtu.append(icH,[ix_['X32']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X33']])
        icH  = jtu.append(icH,[ix_['X9']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X9']])
        icH  = jtu.append(icH,[ix_['X33']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X34']])
        icH  = jtu.append(icH,[ix_['X10']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X10']])
        icH  = jtu.append(icH,[ix_['X34']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X35']])
        icH  = jtu.append(icH,[ix_['X11']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X11']])
        icH  = jtu.append(icH,[ix_['X35']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X36']])
        icH  = jtu.append(icH,[ix_['X12']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X12']])
        icH  = jtu.append(icH,[ix_['X36']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X37']])
        icH  = jtu.append(icH,[ix_['X13']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X13']])
        icH  = jtu.append(icH,[ix_['X37']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X38']])
        icH  = jtu.append(icH,[ix_['X14']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X14']])
        icH  = jtu.append(icH,[ix_['X38']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X39']])
        icH  = jtu.append(icH,[ix_['X15']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X15']])
        icH  = jtu.append(icH,[ix_['X39']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X40']])
        icH  = jtu.append(icH,[ix_['X16']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X16']])
        icH  = jtu.append(icH,[ix_['X40']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X41']])
        icH  = jtu.append(icH,[ix_['X17']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X17']])
        icH  = jtu.append(icH,[ix_['X41']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X42']])
        icH  = jtu.append(icH,[ix_['X18']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X18']])
        icH  = jtu.append(icH,[ix_['X42']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X43']])
        icH  = jtu.append(icH,[ix_['X19']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X19']])
        icH  = jtu.append(icH,[ix_['X43']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X44']])
        icH  = jtu.append(icH,[ix_['X20']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X20']])
        icH  = jtu.append(icH,[ix_['X44']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X45']])
        icH  = jtu.append(icH,[ix_['X21']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X21']])
        icH  = jtu.append(icH,[ix_['X45']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X46']])
        icH  = jtu.append(icH,[ix_['X22']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X22']])
        icH  = jtu.append(icH,[ix_['X46']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X47']])
        icH  = jtu.append(icH,[ix_['X23']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X23']])
        icH  = jtu.append(icH,[ix_['X47']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X48']])
        icH  = jtu.append(icH,[ix_['X24']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X24']])
        icH  = jtu.append(icH,[ix_['X48']])
        valH = jtu.append(valH,float(1.0))
        irH  = jtu.append(irH,[ix_['X49']])
        icH  = jtu.append(icH,[ix_['X1']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X1']])
        icH  = jtu.append(icH,[ix_['X49']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X50']])
        icH  = jtu.append(icH,[ix_['X2']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X2']])
        icH  = jtu.append(icH,[ix_['X50']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X51']])
        icH  = jtu.append(icH,[ix_['X3']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X3']])
        icH  = jtu.append(icH,[ix_['X51']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X52']])
        icH  = jtu.append(icH,[ix_['X4']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X4']])
        icH  = jtu.append(icH,[ix_['X52']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X53']])
        icH  = jtu.append(icH,[ix_['X5']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X5']])
        icH  = jtu.append(icH,[ix_['X53']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X54']])
        icH  = jtu.append(icH,[ix_['X6']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X6']])
        icH  = jtu.append(icH,[ix_['X54']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X55']])
        icH  = jtu.append(icH,[ix_['X7']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X7']])
        icH  = jtu.append(icH,[ix_['X55']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X56']])
        icH  = jtu.append(icH,[ix_['X8']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X8']])
        icH  = jtu.append(icH,[ix_['X56']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X57']])
        icH  = jtu.append(icH,[ix_['X9']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X9']])
        icH  = jtu.append(icH,[ix_['X57']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X58']])
        icH  = jtu.append(icH,[ix_['X10']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X10']])
        icH  = jtu.append(icH,[ix_['X58']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X59']])
        icH  = jtu.append(icH,[ix_['X11']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X11']])
        icH  = jtu.append(icH,[ix_['X59']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X60']])
        icH  = jtu.append(icH,[ix_['X12']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X12']])
        icH  = jtu.append(icH,[ix_['X60']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X61']])
        icH  = jtu.append(icH,[ix_['X13']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X13']])
        icH  = jtu.append(icH,[ix_['X61']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X62']])
        icH  = jtu.append(icH,[ix_['X14']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X14']])
        icH  = jtu.append(icH,[ix_['X62']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X63']])
        icH  = jtu.append(icH,[ix_['X15']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X15']])
        icH  = jtu.append(icH,[ix_['X63']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X64']])
        icH  = jtu.append(icH,[ix_['X16']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X16']])
        icH  = jtu.append(icH,[ix_['X64']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X65']])
        icH  = jtu.append(icH,[ix_['X17']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X17']])
        icH  = jtu.append(icH,[ix_['X65']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X66']])
        icH  = jtu.append(icH,[ix_['X18']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X18']])
        icH  = jtu.append(icH,[ix_['X66']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X67']])
        icH  = jtu.append(icH,[ix_['X19']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X19']])
        icH  = jtu.append(icH,[ix_['X67']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X68']])
        icH  = jtu.append(icH,[ix_['X20']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X20']])
        icH  = jtu.append(icH,[ix_['X68']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X69']])
        icH  = jtu.append(icH,[ix_['X21']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X21']])
        icH  = jtu.append(icH,[ix_['X69']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X70']])
        icH  = jtu.append(icH,[ix_['X22']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X22']])
        icH  = jtu.append(icH,[ix_['X70']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X71']])
        icH  = jtu.append(icH,[ix_['X23']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X23']])
        icH  = jtu.append(icH,[ix_['X71']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X72']])
        icH  = jtu.append(icH,[ix_['X24']])
        valH = jtu.append(valH,float(-1.0))
        irH  = jtu.append(irH,[ix_['X24']])
        icH  = jtu.append(icH,[ix_['X72']])
        valH = jtu.append(valH,float(-1.0))
        #%%%%%%%% BUILD THE SPARSE MATRICES %%%%%%%%%%%%%%%
        self.A = BCSR.from_bcoo(BCOO((valA, jnp.array((irA,icA)).T), shape=(ngrp,self.n)))
        self.H = BCSR.from_bcoo(BCOO((valH, jnp.array((irH,icH)).T), shape=(self.n,self.n)))
        #%%%%%%%% DEFAULT FOR MISSING SECTION(S) %%%%%%%%%%
        #%%%%%%%%%%%%% FORM clower AND cupper %%%%%%%%%%%%%
        self.clower = jnp.full((self.m,1),-float('Inf'))
        self.cupper = jnp.full((self.m,1),+float('Inf'))
        self.clower = jtu.np_like_set(self.clower, jnp.array([jnp.arange(self.nle,self.nle+self.neq)]), jnp.zeros((self.neq,1)))
        self.cupper = jtu.np_like_set(self.cupper, jnp.array([jnp.arange(self.nle,self.nle+self.neq)]), jnp.zeros((self.neq,1)))
        #%%%% RETURN VALUES FROM THE __INIT__ METHOD %%%%%%
        self.lincons   = jnp.arange(len(self.congrps))
        self.pbclass   = "C-CQLR2-AN-72-24"
        self.x0        = jnp.zeros((self.n,1))
        self.objderlvl = 2
        self.conderlvl = [2]


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

